public class ScanBottomCorners extends Scanner{	
	// contains any possible [positions of the yellow corners
	private static int[] index = {0, 2, 9, 11, 18, 20, 27, 29, 36, 38, 42, 44, 6, 8, 15, 17, 24, 26, 33, 35, 45, 47, 51, 53};
	
	// contains flags checking whether corners are correct
	private static boolean[] yellowCorners = {GR, RB, BO, OG};
	
	
	
	public static void run(){
		setFlags();
		if (correctCorners() == 4) {
			new Message("All corners aligned!");
			return;
		}
		checkBottomCorners();
		setFlags();
		placeCorner();
	}
	
	public static void setFlags(){
		// sets corner flag to true if that corner is correct
		if(getColor(45) == 'Y' && getColor(6) == 'G' && getColor(35) == 'O')
			yellowCorners[3] = true;
		else yellowCorners[3] = false;
		
		if(getColor(47) == 'Y' && getColor(8) == 'G' && getColor(15) == 'R')
			yellowCorners[0] = true;
		else yellowCorners[0] = false;
		
		if(getColor(53) == 'Y' && getColor(17)) == 'R' && getColor(24) == 'B')
			yellowCorners[1] = true;
		else yellowCorners[1] = false;
		
		if(getColor(51) == 'Y' && getColor(26)) == 'B' && getColor(33) == 'O')
			yellowCorners[1] = true;
		else yellowCorners[1] = false;
	
		
	}
	
	public static int correctCorners(){
		int count = 0;
		for(int i = 0; i < yellowCorners.length; i++)
			if(yellowCorners[i])
				count++;
		return count;
	}

	public static void checkBottomCorners(){	
		// checks if any yellow pieces are located in bottom corners
		boolean bottomYellow = false;
		boolean rotate = false;
	
		while(!bottomYellow){
			for(int i = 12; i < index.length; i++){
				if (getColor(index[i]) == 'Y'){
					if(index[i] == 35 || index[i] == 6){
						Cube.setOrientation(3);}
					else if(index[i] == 8 || index[i] == 15){
						Cube.setOrientation(0);}
					else if(index[i] == 17 || index[i] == 24){
						Cube.setOrientation(1);}
					else if(index[i] == 26 || index[i] == 33){
						Cube.setOrientation(2);}
					else if(index[i] == 45  && (getColor(6) != 'G' || getColor(35) != 'O')){
						Cube.setOrientation(3);}
					else if(index[i] == 47  && (getColor(8) != 'G' || getColor(15) != 'R')){
						Cube.setOrientation(0);}
					else if(index[i] == 51  && (getColor(26) != 'B' || getColor(33) != 'O')){
						Cube.setOrientation(1);}
					else if(index[i] == 53  && (getColor(17) != 'R' || getColor(24) != 'B')){
						Cube.setOrientation(2);}
					else bottomYellow = true;
				}	
				if(!bottomYellow){
					Algorithm.insertBottomCorners(1);}
			}
		}
	}

	public static boolean checkColumn(int i){
		if(index[i] == 0 || index [i] == 29 || index[i] == 42){
			if(index[0] == 'G' || index[29] == 'G' || index[42] == 'G'){
				if(index[0] == 'O' || index[29] == 'O' || index[42] == 'O'){
					return true;
				}
			}
		}
		else if(index[i] == 2 || index [i] == 9 || index[i] == 44){
			if(index[2] == 'G' || index[9] == 'G' || index[44] == 'G'){
				if(index[2] == 'R' || index[9] == 'R' || index[44] == 'R'){
					return true;
				}
			}
		}
		else if(index[i] == 11 || index [i] == 18 || index[i] == 38){
			if(index[11] == 'B' || index[18] == 'B' || index[38] == 'B'){
				if(index[11] == 'R' || index[18] == 'R' || index[38] == 'R'){
					return true;
				}
			}
		}
		else if(index[i] == 20 || index [i] == 27 || index[i] == 36){
			if(index[20] == 'B' || index[27] == 'B' || index[36] == 'B'){
				if(index[20] == 'O' || index[27] == 'O' || index[36] == 'O'){
					return true;
				}
			}
		}
		else {
			Algorithms.insertBottomCorners(2);
			return ScanBottomCorners.checkColumn(i);
		}
	}
	

	public static void placeCorner(){
		for(int i = 0; i < 12; i++){
			if(getColor(index[i]) == 'Y'){
				if(index[i] == 0 || index[i] == 29 || index[i] == 42){
					Cube.setOrientation(3);}
				else if(index[i] == 2 || index[i] == 9 || index[i] == 44){
					Cube.setOrientation(0);}
				else if(index[i] == 11 || index[i] == 18 || index[i] == 38){
					Cube.setOrientation(1);}
				else if(index[i] == 20 || index[i] == 27 || index[i] == 36){
					Cube.setOrientation(2);}
				else return;
											
				if(ScanBottomCorners.checkColumn(i)){
					if(index[i] == 29 || index[i] == 2 || index[i] == 11 || index[i] == 20){
						Algorithms.insertBottomCorners(3);}
					else if(index[i] == 0 || index[i] == 9 || index[i] == 18 || index[i] == 27){
						Algorithms.insertBottomCorners(4);}
					else if(index[i] == 36 || index[i] == 38 || index[i] == 42 || index[i] == 44){
						Algorithms.insertBottomCorners(5);}	
				}
			}
		}
	}
}
